#!/bin/bash
set -e
#############################################
#    vulpo - StelaLinux Package Manager     #
#-------------------------------------------#
# Created by Alexander Barris (AwlsomeAlex) #
#    Licensed under the GNU GPLv3 License   #
#############################################
# Copyright (C) 2020 Alexander Barris <alexjbarris at protonmain dot com>
# All Rights Reserved
# Licensed under the GNU GPLv3, which can be found
# at https://www.gnu.org/licenses/gpl-3.0.en.html#
#############################################
# Toolchain Implementation by AtaraxiaLinux #
#############################################

#------------------------------------#
# ----- User Defined Variables ----- #
#------------------------------------#

# --- StelaLinux Build Information --- #
export BUILD_NAME="Git Build"
export BUILD_NUMBER="vGIT"

# --- Package List --- #
PKGS=("linux" "nova" "busybox" "musl" "syslinux")

# --- StelaLinux Target Platform --- #
# Tier 1: Guarantee to support
export BARCH=x86_64

# Tier 1.5: Guarantee to maintain
#export BARCH=i686

# Tier 2: Guarantee to build
# Tier 3: Guarantee to provide tools
# Tier x: Guarantee to implement

# --- Directory Information --- #
# StelaLinux Project Root Directory
export STELA="$(pwd)"

# StelaLinux Source Package Repository
export RDIR="${STELA}/packages"


#############################################################
#-----------------------------------------------------------#
#  P L E A S E   D O   N O T   T O U C H   A N Y T H I N G  #
#          A F T E R   T H I S   P O I N T   : )            #
#-----------------------------------------------------------#
#############################################################
# Unless you know what you are doing....

# --- Directory Variables --- #
export SRC_DIR="${STELA}/source"
export WRK_DIR="${STELA}/work"
export FIN_DIR="${STELA}/final"

# --- Color Codes --- #
NC='\033[0m'        # No Color
RED='\033[1;31m'    # Red
BLUE='\033[1;34m'   # Blue
GREEN='\033[1;32m'  # Green
ORANGE='\033[0;33m' # Orange
BLINK='\033[5m'     # Blink
NO_BLINK='\033[25m' # No Blink

#------------------------------------------------#
# ----- StelaLinux Toolchain Configuration ----- #
#------------------------------------------------#

# --- Toolchain Directory Variables --- #
# Toolchain Root
export TROOT="${STELA}/toolchain"

# --- Compiler Information --- #
export HOSTCC="gcc"
export HOSTCXX="g++"
export ORIGMAKE="$(which make)"

# --- Platform Information --- #
export XTARGET="${BARCH}-linux-musl"
export XHOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"

# --- Compiler Flags --- #
export CFLAGS="-g0 -Os -s -fexcess-precision=fast -fomit-frame-pointer -Wl,--as-needed -pipe"
export CXXFLAGS="${CFLAGS}"
export LC_ALL="POSIX"
export NUM_JOBS="$(expr $(nproc) + 1)"
export MAKEFLAGS="-j$NUM_JOBS"

# --- Build Flags --- #
export BUILDFLAGS="--build=$XHOST --host=$XTARGET"
export TOOLFLAGS="--build=$XHOST --host=$XTARGET --target=$XTARGET"
export PERLFLAGS="--target=$XTARGET"
export PKG_CONFIG_PATH="$FIN_DIR/usr/lib/pkgconfig:$FIN_DIR/usr/share/pkgconfig"
export PKG_CONFIG_SYSROOT="$FIN_DIR"

export PATH="${TROOT}/bin:$PATH"

# --- Executable Names --- #
export CROSS_COMPILE="$XTARGET-"
export CC="$XTARGET-gcc"
export CXX="$XTARGET-g++"
export AR="$XTARGET-ar"
export AS="$XTARGET-as"
export RANLIB="$XTARGET-ranlib"
export LD="$XTARGET-ld"
export STRIP="$XTARGET-strip"

#------------------------------#
# ----- Helper Functions ----- #
#------------------------------#

# vprint($1: message $2: flag): Prints a line
function vprint() {
    msg=$1
    flag=$2
    case ${flag} in
        "..")
            echo -e "${BLUE}.. ${NC}${msg}"
            ;;
        "ok")
            echo -e "${GREEN}ok ${NC}${msg}"
            ;;
        "?!")
            echo -e "${ORANGE}?! ${NC}${msg}"
            ;;
        "!!")
            echo -e "${RED}!! ${NC}${msg}"
            ;;
        "")
            echo -e "${NC}${msg}"
            ;;
        *)
            echo -e "${RED}!! ${ORANGE}vprint: ${NC}Invalid flag ${flag}"
            exit
            ;;
    esac
}

# vtitle(): Displays the title
function vtitle() {
    vprint "+=============================+"
    vprint "|    vulpo Package Manager    |"
    vprint "+-----------------------------+"
    vprint "| Created by Alexander Barris |"
    vprint "|          GNU GPLv3          |"
    vprint "+=============================+"
    vprint ""
}

# vget($1: url): Download and Extract a file
function vget() {
    url=$1
    archive_file=${url##*/}
    if [[ -f ${SRC_DIR}/${archove_file} ]]; then
        vprint "${archive_file} already exists. Skipping.." "ok"
    else
        vprint "Downloading ${archive_file}.." ".."
        (cd ${SRC_DIR} && curl -O ${url})
        vprint "${archive_file} downloaded."
    fi
    if [[ ${archive_file} == *".bz2" ]] || [[ ${archive_file} == *".xz" ]] || [[ ${archive_file} == *".gz" ]]; then
        vprint "Untarring ${archive_file}.." ".."
        pv ${SRC_DIR}/${archive_file} | tar -xf - -C ${work_dir}/
        vprint "Untarred ${archive_file}." "ok"
    elif [[ ${archive_file} == *".zip" ]]; then
        vprint "Unzipping ${archive_file}.." ".."
        unzip -o ${SRC_DIR}/${archive_file} -d ${work_dir}/ | pv -l >/dev/null
        vprint "Unzipped ${archive_file}." "ok"
    fi
}

# vinstall($1: Package Directory): Installs a locally built package into StelaLinux Root Directory
function vinstall() {
    pkg_dir=$1
    vprint "Installing ${pkg_dir} to rootFS.." ".."
    cp -r --remove-destination ${pkg_dir} $FIN_DIR/
    vprint "Installed ${pkg_dir} to rootFS." "ok"
}

#-----------------------------#
# ----- Build Functions ----- #
#-----------------------------#

# bclean(): Cleans StelaLinux Build Environment
function bclean() {
    vtitle
    vprint "Cleaning StelaLinux Build Environment.." ".."
    rm -r ${SRC_DIR} ${WRK_DIR} ${FIN_DIR}
    rm -r ${TROOT}
    rm ${STELA}/*.iso ${STELA}/*.tar.xz
    vprint "Cleaned StelaLinux Build Environment." "ok"
}

# btool(): Builds the Toolchain
function btool() {
    vtitle
    if [[ -d ${TROOT} ]]; then
        vprint "Toolchain Already Exists." "?!"
        read -p "Overwrite? (Y/n): " opt
        if [[ ${opt} != 'Y' ]]; then
            vprint "Bye."
            exit
        fi
    fi
}
