#======================================
# natick Build System - Script Library
#======================================
# Copyright (C) 2021 AJ Barris (AwlsomeAlex)
# aj at awlsome dot com
# ISC License - All Rights Reserved
#======================================

# Print Functions
function fail_print() { printf "\033[1;31m!!\033[0m ${1}\n"; exit 1; }
function done_print() { printf "\033[1;32m=>\033[0m ${1}\n"; }
function warn_print() { printf "\033[1;33m!.\033[0m ${1}\n"; }
function wait_print() { printf "\033[1;34m..\033[0m ${1}\n"; }

# show_usage(): Shows the usage and help information for this script
function show_usage {
    cat <<EOF
nbs (natick Build System) - A simple build system for natickOS

Usage: ${EXEC} (architecture) (command) [argument]

Supported Architectires:
    x86_64)     64-bit version of the x86 instruction set. 
                Most modern processors support this
    i686)       6th Generation of the x86 instruction set. 
                Intel Pentium Pro and up support this
    aarch64)    64-bit version of the ARM instruction set.
                Raspberry Pi 3+ & Apple M1 support this


Commands:
    clean       Cleans the natick Build System environment
    toolchain   Generates a musl-libc toolchain for the natick Build System
    help        Shows this message

Arguments:
EOF
    exit
}

# setup_host_variables(): Exports all variables needed to build host packages
function setup_host_variables {
    # Directory Structure
    export ROOT_DIR="$(pwd)"
    export BUILD_DIR="${ROOT_DIR}/${ARCH}"
    export SOURCE_DIR="${ROOT_DIR}/source"
    export WORK_DIR="${BUILD_DIR}/work"
    export SYSROOT_DIR="${BUILD_DIR}/sysroot"
    export TOOLCHAIN_DIR="${BUILD_DIR}/toolchain"
    export PACKAGE_DIR="${ROOT_DIR}/packages"

    # Compiler Flags
    export PATH="${TOOLCHAIN_DIR}/bin:${PATH}"
    export HOSTCC="gcc"
    export HOSTCXX="g++"
    export ORIGMAKE="$(command -v make)"
    export CFLAGS="-O2"
    export CXXFLAGS="${CFLAGS}"
    export LC_ALL="POSIX"
    export JOBS="-j$(expr $(nproc) + 1)"
    export MAKE="make ${JOBS}"
    export PKG_CONFIG="$(which pkg-config)"

    # Compiler Architecture
    export HOST="$(echo ${MACHTYPE} | sed -e 's/-[^-]*/-cross/')"
    case "${ARCH}" in
        x86_64)
            export TARGET="x86_64-linux-musl"
            export CROSS_ARCH="x86-64"
            export LINUX_ARCH="x86_64"
            export MACHINE_ARCH="${LINUX_ARCH}"
            export GCC_ARGS="--with-arch=${CROSS_ARCH} --with-tune=generic"
            ;;
        i686)
            export TARGET="i686-linux-musl"
            export CROSS_ARCH="i686"
            export LINUX_ARCH="i386"
            export MACHINE_ARCH="${LINUX_ARCH}"
            export GCC_ARGS="--with-arch=${CROSS_ARCH} --with-tune=generic"
            ;;
        aarch64)
            export TARGET="aarch64-linux-musl"
            export CROSS_ARCH="aarch64"
            export LINUX_ARCH="arm64"
            export MACHINE_ARCH="${CROSS_ARCH}"
            export GCC_ARGS="--with-arch=armv8-a --with-abi=lp64 --enable-fix-cortex-a53-835769 --enable-fix-cortex-a53-843419"
        *)
            show_usage
            ;;
    esac
}

# setup_build_system(): Configures environmental flags and creates
#                       directories (if they don't already exist)
function setup_build_system() {
    if [[ -d "${BUILD_DIR} "]]; then
        warn_print "${ARCH} build directory already exists."
        read -p "Delete? (Y/n): "
        if [[ ${opt} == "Y" ]]; then
            rm -rf ${WORK_DIR} ${TOOLCHAIN_DIR} ${SYSROOT_DIR}
        else
            fail_print "natick Build System already exists."
        fi
    fi
    mkdir -p ${SOURCE_DIR}
    mkdir -p ${BUILD_DIR}/{work/{host,target},toolchain,sysroot}
}
